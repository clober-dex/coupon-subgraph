type Token @entity {
  id: ID!
  symbol: String!
  name: String!
  decimals: BigInt!
}

type Asset @entity {
  id: ID!
  underlying: Token!
  collaterals: [Collateral!]!
  substitutes: [Token!]!
}

type Epoch @entity {
  id: ID!
  startTimestamp: BigInt!
  endTimestamp: BigInt!
}

type AssetStatus @entity {
  id: ID! # ${address}-${epoch}
  asset: Asset!
  epoch: Epoch!
  market: Market!
  totalDeposited: BigInt!
  totalBorrowed: BigInt!
}

type Collateral @entity {
  id: ID! # ${substitute}-${debt}
  liquidationThreshold: BigInt!
  liquidationTargetLtv: BigInt!
  underlying: Token!
  substitute: Token!
  totalCollateralized: BigInt!
  totalBorrowed: BigInt!
}

type BondPosition @entity {
  id: ID! # token id
  user: String!
  amount: BigInt!
  principal: BigInt!
  substitute: Token!
  underlying: Token!
  fromEpoch: Epoch!
  toEpoch: Epoch!
  createdAt: BigInt!
  updatedAt: BigInt!
}

type LoanPosition @entity {
  id: ID! # token id
  user: String!
  collateral: Collateral!
  collateralAmount: BigInt!
  amount: BigInt!
  liquidationRepaidAmount: BigInt!
  principal: BigInt!
  substitute: Token!
  underlying: Token!
  fromEpoch: Epoch!
  toEpoch: Epoch!
  createdAt: BigInt!
  updatedAt: BigInt!
  borrowedCollateralAmount: BigInt!
}


# Clober

type Market @entity {
  # market address
  id: ID!
  orderToken: Bytes!
  quoteToken: Token!
  baseToken: Token!
  quoteUnit: BigInt!
  makerFee: BigInt!
  takerFee: BigInt!
  a: BigInt!
  r: BigInt!
  d: BigInt!
  epoch: Epoch!
  couponId: BigInt!

  depths: [Depth!]! @derivedFrom(field: "market")
}

type Depth @entity {
  # market address + "-" + priceIndex + "-" + isBid in swaps Transaction array
  id: ID!
  market: Market!
  priceIndex: BigInt!
  price: BigInt!
  isBid: Boolean!
  rawAmount: BigInt!
}